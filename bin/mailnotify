#!/usr/bin/env ruby

require 'optparse'

require 'rubygems'
require 'rb-mailnotify'

$PROGRAM_NAME = "mailnotify"
DEFAULT_MAILDIR = File.join(ENV["HOME"], "Maildir")

def parse_args(args)
  options = {
    :maildir => DEFAULT_MAILDIR,
    }
  opts = OptionParser.new do |opts|
    opts.on("-m MAILDIR", "--maildir", "use alternate maildir directory (default #{DEFAULT_MAILDIR}") do |o|
      options[:maildir] = o
    end
    opts.on("-d", "--debug","enable debugging output") do |o|
      options[:debug] = o
    end
    opts.on("-B","--background", "fork into the background") do |o|
      options[:background] = o
    end
  end

  begin
    opts.parse!(args)
  rescue OptionParser::InvalidOption => ex
    puts ex
    puts opts
    abort
  end


  return options
end

def main(opts)
  # First: build list of maildirs. use 'find' and build that list
  maildirs = find_maildirs(opts[:maildir])

  # Second: setup inotify watchers on those directories
  #   if there are new events in the "new" directories,
  #   then trigger the libnotify for that subdir
  notifier = INotify::Notifier.new
  times = {}
  wait = 10
  maildirs.each do |mdir|
    times[mdir] = Time.now # Start off with a timestamp

    # The following block is storing a callback in the notifier
    notifier.watch(File.join(mdir, 'new'), :create, :moved_to) do |path|
      if (times[mdir] + wait) < Time.now
        check_maildir(mdir) do |new_mails,old_mails|
          @log.debug("notifying about #{new_mails.length} emails in #{File.basename(mdir)}")
          notify_new_mail(File.basename(mdir), new_mails.length)
          times[mdir] = Time.now
        end
      else
        @log.debug("too soon, waiting a couple of seconds for the dust to settle")
      end
    end
  end

  begin
    notifier.run
  rescue Interrupt
    @log.info("caught Interrupt, closing")
    true
  end
end

@options = parse_args(ARGV)
@log.level = Logger::DEBUG if @options[:debug]

if @options[:background]
  pid = Kernel.fork { main(@options) }
  puts "Running in background pid #{pid} ..."
else
  main(@options)
end

# vim:set sw=2 sts=2 et:
